#+title: Features

* DONE ~dockerfile~ component type to ~add~ command

+ Default Dockerfile implementation
+ Should check if one already exists and output error if so
+ User should be able to run ~gotm add dockerfile~ and having a perfectly working image
  + E.g. compiled with ~CGO=1~ so that sqlite works as intended

Dockerfile should be semi-optimized
+ e.g. small as runner image
  + Two builders, one for frontend and one for backend
+ optimised for caching, e.g. package*.json files loaded and npm install first for fast rebuilds

* TODO ~db~ command

Handles everything to do with adding a database to the project

Database will handle using `sqlite`
+ everything about this program is catering to a specific opinionated stack.. this will be no different


It will have several subcommands (likely implemented as separate controllers?)

** TODO ~init~

+ Install sqlite3 driver in go project (Probably via running the command)
+ Creates ~repositories/sqlite.go~ (Fails if exists) containing ~SqliteRepository~ struct
+ Default implementation for an sqlite database (including some kind of migration manager?)
  + Might need to program a simple one?

** TODO ~add~

+ Similar to ~gotm add~ command
+ Allows the user to expand the database

*** TODO ~table~

Adds a table with the given fields to the database

Does two things
1. Generate a basic migration file to add the file
2. Generates basic methods on ~SqliteRepository~ for C.R.U.D operations with the file
   + This only covers the basic case, *NOT HANDLING RELATIONAL TABLES*
   + Trying to make this too smart will add too many knobs for it to be fast and easy to use

Maybe, depending on file structure within the repository, a check is done to see if a table with that name already exists?

Example: ~gotm db add table users --fields username=string password_hash=string created_at=int updated_at=int~
    

*** TODO ~migration~

Just creates a migration file in the correct spot and with the correct timestamp

+ Ideal for database changes that don't involve a new table
